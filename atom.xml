<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伏窗尾的猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-20T03:14:57.368Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>喵呜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习之路 —— 进程与线程　　（一）</title>
    <link href="http://yoursite.com/2018/09/20/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20%E2%80%94%E2%80%94%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/09/20/学习之路 —— 进程与线程/</id>
    <published>2018-09-20T05:58:20.000Z</published>
    <updated>2018-09-20T03:14:57.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习之路-——-进程与线程"><a href="#学习之路-——-进程与线程" class="headerlink" title="学习之路 —— 进程与线程"></a>学习之路 —— 进程与线程</h1><h2 id="一、进程和线程关系及区别"><a href="#一、进程和线程关系及区别" class="headerlink" title="一、进程和线程关系及区别"></a>一、进程和线程关系及区别</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>　　进程是<strong>独立功能</strong>的程序关于某个<strong>数据集合</strong>上的一次运行活动，进程是系统进行资源分配和调度的一个独立单位。<br>　　线程是进程中的一个实体，是cpu调度和分配的基本单位，但线程基本不拥有系统资源。</p><h3 id="2、关系"><a href="#2、关系" class="headerlink" title="2、关系"></a>2、关系</h3><p>　　<br>　　进程是一个动态的概念，线程是进程中的一部分，<strong>一个程序至少有一个进程，一个进程至少有一个线程</strong>。两者均能实现并发。　　</p><p>###3、分别</p><p>　　1）地址空间：线程间共享同一进程的地址空间，进程有自己独立的地址空间。<br>　　2）资源拥有：进程是资源分配和拥有的单位，同进程的线程共享进程资源。　　　　</p><h3 id="4、优劣"><a href="#4、优劣" class="headerlink" title="4、优劣"></a>4、优劣</h3><p>　　1）线程是处理器调度的基本单位，其划分的尺度小于进程，使得多线程程序的并发性高。</p><p>　　2）进程在执行过程中拥有独立的内存单元，而多个线程之间共享内存，运行效率高，但由于共享内存，导致线程与线程间互有影响，其中一个线程死亡会导致整个进程死掉，所以多进程程序比多线程程序健壮，但进程切换耗费资源大，效益低。</p><p>　　3）线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>　　4）从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p><p>　　5）线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习之路-——-进程与线程&quot;&gt;&lt;a href=&quot;#学习之路-——-进程与线程&quot; class=&quot;headerlink&quot; title=&quot;学习之路 —— 进程与线程&quot;&gt;&lt;/a&gt;学习之路 —— 进程与线程&lt;/h1&gt;&lt;h2 id=&quot;一、进程和线程关系及区别&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="学习之路" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="进程与线程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易hexo的搭建　　（一）</title>
    <link href="http://yoursite.com/2018/09/08/GCC%E4%B8%8B%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%83%B0%E6%80%A7%E8%BF%90%E7%AE%97%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2018/09/08/GCC下逻辑运算符的惰性运算与优先级的思考/</id>
    <published>2018-09-08T05:58:20.000Z</published>
    <updated>2018-09-08T09:06:32.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建须知"><a href="#搭建须知" class="headerlink" title="搭建须知"></a>搭建须知</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始前，你必须已经：</p><pre><code>1.有一个github账号2.安装好git for windows3.安装有node.js、npm，并有一定的了解</code></pre><h1 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>　　新建一个名为 (用户名.github.io)的仓库，例如你的用户名为test<br>则创建一个名为test.github.io的仓库，将来你的网站访问地址为</p><pre><code>http：//用户名.github.io</code></pre><p>　　是不是很方便，但每个github账户只能有一个这样可以直接访问域名的仓库。创建成功后，以后你网站的所有代码都放在这个仓库啦。</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>　　为什么要配置这个呢，因为提交代码肯定是要拥有你的github权限才行，但直接使用用户名和密码太不安全了，所以使用SSH key来解决本地和服务器连接的问题。在git bush中输入</p><pre><code>$ cd ~/.ssh #检查本机已存在的ssh</code></pre><p>　　如果提示No such file or directory 说明是第一次使用git。</p><pre><code>$ssh-keygen -t rsa -C &quot;邮件地址&quot;</code></pre><p>　　然后连续三次回车，最终生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，打开并复制其中的内容，打开github主页，进入个人设置-&gt;SSH and GPG keys -&gt;New SSH key。将内容粘贴到key中，title随便填，保存。</p><h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><pre><code>$ ssh -T git@github.com</code></pre><p>　　如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><pre><code>Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>　　配置成功，但还得再配置两条</p><pre><code>$ git config --global user.name &quot;xxx&quot;// 你的github用户名，非昵称$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</code></pre><h1 id="使用——hexo"><a href="#使用——hexo" class="headerlink" title="使用——hexo"></a>使用——hexo</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>$ npm install -g hexo</code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>　　在电脑的某个地方新建一个hexo文件夹，例如我在c：\bin\hexo,记住安装位置，常用。</p><pre><code>$ cd /c/bin/hexo/$ hexo init</code></pre><p>　　hexo会自动下载一些文件在这个目录下．接下来：</p><pre><code>$ hexo g # 生成$ hexo s # 启动服务</code></pre><p>　　执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的。</p><p>　　hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 我们将见到我们的第一篇文章，Hello World。</p><p>　　到现在，ｈｅｘｏ博客的搭建已经完成，摩天大楼的基石已经建立，接下来，就是美化，填充，与修缮了，随着本人的学习，hexo博客教程也将接着完善——敬请期待。　　　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建须知&quot;&gt;&lt;a href=&quot;#搭建须知&quot; class=&quot;headerlink&quot; title=&quot;搭建须知&quot;&gt;&lt;/a&gt;搭建须知&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
